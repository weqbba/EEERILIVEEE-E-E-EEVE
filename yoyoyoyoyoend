local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local Player = Players.LocalPlayer
local Figure = nil
local Torso = nil
local RightShoulder = nil
local LeftShoulder = nil
local RightHip = nil
local LeftHip = nil
local Neck = nil
local Humanoid = nil
local Animator = nil -- New: Reference to the Animator
local pose = "Standing"

local currentAnim = ""
local currentAnimInstance = nil
local currentAnimTrack = nil
local currentAnimKeyframeHandler = nil
local currentAnimSpeed = 1.0
local animTable = {}

-- Fixed anim IDs to proper rbxassetid format and removed run.xml which is invalid
local animNames = {
	idle = {
		{ id = "rbxassetid://180435571", weight = 9 },
		{ id = "rbxassetid://180435792", weight = 1 }
	},
	walk = {
		{ id = "rbxassetid://180426354", weight = 10 }
	},
	run = {
		{ id = "rbxassetid://180426334", weight = 10 } -- <-- IMPORTANT: replace with a valid run animation ID if this one doesn't work
	},
	jump = {
		{ id = "rbxassetid://125750702", weight = 10 }
	},
	fall = {
		{ id = "rbxassetid://180436148", weight = 10 }
	},
	climb = {
		{ id = "rbxassetid://180436334", weight = 10 }
	},
	sit = {
		{ id = "rbxassetid://178130996", weight = 10 }
	},
	toolnone = {
		{ id = "rbxassetid://182393478", weight = 10 }
	},
	toolslash = {
		{ id = "rbxassetid://129967390", weight = 10 }
	},
	toollunge = {
		{ id = "rbxassetid://129967478", weight = 10 }
	},
	wave = {
		{ id = "rbxassetid://128777973", weight = 10 }
	},
	point = {
		{ id = "rbxassetid://128853357", weight = 10 }
	},
	dance1 = {
		{ id = "rbxassetid://182435998", weight = 10 },
		{ id = "rbxassetid://182491037", weight = 10 },
		{ id = "rbxassetid://182491065", weight = 10 }
	},
	dance2 = {
		{ id = "rbxassetid://182436842", weight = 10 },
		{ id = "rbxassetid://182491248", weight = 10 },
		{ id = "rbxassetid://182491277", weight = 10 }
	},
	dance3 = {
		{ id = "rbxassetid://182436935", weight = 10 },
		{ id = "rbxassetid://182491368", weight = 10 },
		{ id = "rbxassetid://182491423", weight = 10 }
	},
	laugh = {
		{ id = "rbxassetid://129423131", weight = 10 }
	},
	cheer = {
		{ id = "rbxassetid://129423030", weight = 10 }
	},
}

local dances = {"dance1", "dance2", "dance3"}

local emoteNames = { wave = false, point = false, dance1 = true, dance2 = true, dance3 = true, laugh = false, cheer = false }

function configureAnimationSet(name, fileList)
	if animTable[name] then
		for _, connection in pairs(animTable[name].connections) do
			connection:Disconnect()
		end
	end

	animTable[name] = {
		count = 0,
		totalWeight = 0,
		connections = {}
	}

	local config = script:FindFirstChild(name)
	if config then
		table.insert(animTable[name].connections, config.ChildAdded:Connect(function() configureAnimationSet(name, fileList) end))
		table.insert(animTable[name].connections, config.ChildRemoved:Connect(function() configureAnimationSet(name, fileList) end))
		local idx = 1
		for _, childPart in pairs(config:GetChildren()) do
			if childPart:IsA("Animation") then
				table.insert(animTable[name].connections, childPart.Changed:Connect(function() configureAnimationSet(name, fileList) end))
				animTable[name][idx] = {}
				animTable[name][idx].anim = childPart
				local weightObject = childPart:FindFirstChild("Weight")
				animTable[name][idx].weight = weightObject and weightObject.Value or 1
				animTable[name].count = animTable[name].count + 1
				animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
				idx = idx + 1
			end
		end
	end

	if animTable[name].count <= 0 then
		for idx, anim in pairs(fileList) do
			animTable[name][idx] = {}
			animTable[name][idx].anim = Instance.new("Animation")
			animTable[name][idx].anim.Name = name
			animTable[name][idx].anim.AnimationId = anim.id
			animTable[name][idx].weight = anim.weight
			animTable[name].count = animTable[name].count + 1
			animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
		end
	end
end

function scriptChildModified(child)
	local fileList = animNames[child.Name]
	if fileList then
		configureAnimationSet(child.Name, fileList)
	end
end

script.ChildAdded:Connect(scriptChildModified)
script.ChildRemoved:Connect(scriptChildModified)

for name, fileList in pairs(animNames) do
	configureAnimationSet(name, fileList)
end

local toolAnim = "None"
local toolAnimTime = 0
local jumpAnimTime = 0
local jumpAnimDuration = 0.3
local toolTransitionTime = 0.1
local fallTransitionTime = 0.3
local jumpMaxLimbVelocity = 0.75

function stopAllAnimations()
	local oldAnim = currentAnim
	if emoteNames[oldAnim] == false then
		oldAnim = "idle"
	end

	currentAnim = ""
	currentAnimInstance = nil

	if currentAnimKeyframeHandler then
		currentAnimKeyframeHandler:Disconnect()
		currentAnimKeyframeHandler = nil
	end

	if currentAnimTrack then
		currentAnimTrack:Stop()
		currentAnimTrack:Destroy()
		currentAnimTrack = nil
	end
	return oldAnim
end

function setAnimationSpeed(speed)
	if speed ~= currentAnimSpeed and currentAnimTrack then
		currentAnimSpeed = speed
		currentAnimTrack:AdjustSpeed(currentAnimSpeed)
	end
end

function keyFrameReachedFunc(frameName)
	if frameName == "End" then
		local repeatAnim = currentAnim
		if emoteNames[repeatAnim] == false then
			repeatAnim = "idle"
		end
		local animSpeed = currentAnimSpeed
		-- Ensure Animator exists before playing
		if Animator then
			playAnimation(repeatAnim, 0.0, Humanoid)
		end
		setAnimationSpeed(animSpeed)
	end
end

function playAnimation(animName, transitionTime, humanoid)
	-- Removed pcall to expose errors for easier debugging
	if not animTable[animName] then return end
	if not Animator then warn("Animator not found for humanoid:", humanoid.Name); return end -- Warn if Animator is missing

	local roll = math.random(1, animTable[animName].totalWeight)
	local idx = 1
	while roll > animTable[animName][idx].weight do
		roll = roll - animTable[animName][idx].weight
		idx = idx + 1
	end
	local anim = animTable[animName][idx].anim

	if anim ~= currentAnimInstance then
		if currentAnimTrack then
			currentAnimTrack:Stop(transitionTime)
			currentAnimTrack:Destroy()
		end
		currentAnimSpeed = 1.0
		-- Use Animator:LoadAnimation instead of Humanoid:LoadAnimation
		currentAnimTrack = Animator:LoadAnimation(anim)
		currentAnimTrack.Priority = Enum.AnimationPriority.Core
		currentAnimTrack:Play(transitionTime)
		currentAnim = animName
		currentAnimInstance = anim

		if currentAnimKeyframeHandler then
			currentAnimKeyframeHandler:Disconnect()
		end
		currentAnimKeyframeHandler = currentAnimTrack.KeyframeReached:Connect(keyFrameReachedFunc)
	end
end

local toolAnimName = ""
local toolAnimTrack = nil
local toolAnimInstance = nil
local currentToolAnimKeyframeHandler = nil

function toolKeyFrameReachedFunc(frameName)
	if frameName == "End" then
		if Animator then -- Ensure Animator exists
			playToolAnimation(toolAnimName, 0.0, Humanoid)
		end
	end
end

function playToolAnimation(animName, transitionTime, humanoid, priority)
	if not animTable[animName] then return end
	if not Animator then warn("Animator not found for humanoid:", humanoid.Name); return end -- Warn if Animator is missing

	local roll = math.random(1, animTable[animName].totalWeight)
	local idx = 1
	while roll > animTable[animName][idx].weight do
		roll = roll - animTable[animName][idx].weight
		idx = idx + 1
	end
	local anim = animTable[animName][idx].anim

	if toolAnimInstance ~= anim then
		if toolAnimTrack then
			toolAnimTrack:Stop()
			toolAnimTrack:Destroy()
			transitionTime = 0
		end
		-- Use Animator:LoadAnimation
		toolAnimTrack = Animator:LoadAnimation(anim)
		if priority then
			toolAnimTrack.Priority = priority
		end
		toolAnimTrack:Play(transitionTime)
		toolAnimName = animName
		toolAnimInstance = anim

		if currentToolAnimKeyframeHandler then
			currentToolAnimKeyframeHandler:Disconnect()
		end
		currentToolAnimKeyframeHandler = toolAnimTrack.KeyframeReached:Connect(toolKeyFrameReachedFunc)
	end
end

function stopToolAnimations()
	local oldAnim = toolAnimName

	if currentToolAnimKeyframeHandler then
		currentToolAnimKeyframeHandler:Disconnect()
		currentToolAnimKeyframeHandler = nil
	end

	toolAnimName = ""
	toolAnimInstance = nil

	if toolAnimTrack then
		toolAnimTrack:Stop()
		toolAnimTrack:Destroy()
		toolAnimTrack = nil
	end

	return oldAnim
end

-- Animation Event Handlers --
local connections = {} -- Store connections to disconnect on character death

function onRunning(speed)
	-- Removed pcall to expose errors for easier debugging
	if Humanoid.Sit then return end -- Don't animate if sitting

	local runThreshold = Humanoid.WalkSpeed + 2 -- Example: Play run if speed is above WalkSpeed + 2
	-- Adjust this threshold as needed based on your game's Humanoid.WalkSpeed

	if speed > runThreshold then
		playAnimation("run", 0.1, Humanoid)
		setAnimationSpeed(speed / Humanoid.WalkSpeed) -- Adjust speed based on actual Humanoid WalkSpeed
		pose = "Running"
	elseif speed > 0.01 then
		playAnimation("walk", 0.1, Humanoid)
		-- The original script had a specific ID check for walk speed adjustment.
		-- It's usually better to adjust based on Humanoid.WalkSpeed directly.
		if currentAnimInstance and currentAnimInstance.AnimationId == "rbxassetid://180426354" then
			setAnimationSpeed(speed / 14.5) -- Keeping original logic for walk speed adjustment for now.
		end
		pose = "Running"
	else
		if emoteNames[currentAnim] == nil then
			playAnimation("idle", 0.1, Humanoid)
			pose = "Standing"
		end
	end
end

function onDied()
	pose = "Dead"
	stopAllAnimations() -- Stop all animations when dead
	stopToolAnimations()
end

function onJumping()
	playAnimation("jump", 0.1, Humanoid)
	jumpAnimTime = jumpAnimDuration
	pose = "Jumping"
end

function onClimbing(speed)
	playAnimation("climb", 0.1, Humanoid)
	setAnimationSpeed(speed / 12.0)
	pose = "Climbing"
end

function onGettingUp()
	pose = "GettingUp"
	-- Optionally play a 'getting up' animation if you have one
end

function onFreeFall()
	if jumpAnimTime <= 0 then
		playAnimation("fall", fallTransitionTime, Humanoid)
	end
	pose = "FreeFall"
end

function onFallingDown()
	pose = "FallingDown"
	-- Optionally play a 'falling down' animation if you have one
end

function onSeated()
	pose = "Seated"
	playAnimation("sit", 0.5, Humanoid) -- Play sit animation directly here
end

function onPlatformStanding()
	pose = "PlatformStanding"
	-- Optionally play a 'platform standing' animation or idle if you have one
	if emoteNames[currentAnim] == nil then
		playAnimation("idle", 0.1, Humanoid)
	end
end

function onSwimming(speed)
	-- You might want specific swimming animations
	if speed > 0 then
		pose = "Running" -- Or "Swimming" if you add a swim anim
		-- playAnimation("swim_forward", 0.1, Humanoid)
	else
		pose = "Standing" -- Or "Swim_idle"
		-- playAnimation("swim_idle", 0.1, Humanoid)
	end
end

-- Tool handling functions (unchanged)
function getTool()
	for _, kid in ipairs(Figure:GetChildren()) do
		if kid.ClassName == "Tool" then return kid end
	end
	return nil
end

function getToolAnim(tool)
	for _, c in ipairs(tool:GetChildren()) do
		if c.Name == "toolanim" and c.ClassName == "StringValue" then
			return c
		end
	end
	return nil
end

function animateTool()
	if toolAnim == "None" then
		playToolAnimation("toolnone", toolTransitionTime, Humanoid, Enum.AnimationPriority.Idle)
		return
	end
	if toolAnim == "Slash" then
		playToolAnimation("toolslash", 0, Humanoid, Enum.AnimationPriority.Action)
		return
	end
	if toolAnim == "Lunge" then
		playToolAnimation("toollunge", 0, Humanoid, Enum.AnimationPriority.Action)
		return
	end
end

function moveSit()
	RightShoulder.MaxVelocity = 0.15
	LeftShoulder.MaxVelocity = 0.15
	RightShoulder:SetDesiredAngle(math.pi / 2)
	LeftShoulder:SetDesiredAngle(-math.pi / 2)
	RightHip:SetDesiredAngle(math.pi / 2)
	LeftHip:SetDesiredAngle(-math.pi / 2)
end

local lastTick = 0

function move(time)
	local amplitude = 1
	local frequency = 1
	local deltaTime = time - lastTick
	lastTick = time

	-- Ensure Humanoid exists and is not nil before proceeding
	if not Humanoid or Humanoid.Health <= 0 then
		return
	end

	local climbFudge = 0
	local setAngles = false

	if jumpAnimTime > 0 then
		jumpAnimTime = jumpAnimTime - deltaTime
	end

	-- Re-evaluated main animation logic to prevent conflicts
	if pose == "FreeFall" and jumpAnimTime <= 0 then
		playAnimation("fall", fallTransitionTime, Humanoid)
	-- 'Seated' is now handled in onSeated, so not needed here
	-- 'Running' is now handled in onRunning, but this section maintains some old logic for pose updates
	elseif pose == "Dead" or pose == "GettingUp" or pose == "FallingDown" or pose == "Seated" or pose == "PlatformStanding" then
		-- In these states, the main animation loop should probably not be trying to force specific animations,
		-- as the humanoid state handlers (like onSeated) should manage them.
		-- We'll keep stopAllAnimations for Dead/GettingUp/FallingDown to ensure no leftover animations.
		if pose == "Dead" or pose == "GettingUp" or pose == "FallingDown" then
			stopAllAnimations()
		end
		amplitude = 0.1
		frequency = 1
		setAngles = true
	end

	if setAngles then
		local desiredAngle = amplitude * math.sin(time * frequency)
		RightShoulder:SetDesiredAngle(desiredAngle + climbFudge)
		LeftShoulder:SetDesiredAngle(desiredAngle - climbFudge)
		RightHip:SetDesiredAngle(-desiredAngle)
		LeftHip:SetDesiredAngle(-desiredAngle)
	end

	local tool = getTool()
	if tool and tool:FindFirstChild("Handle") then
		local animStringValueObject = getToolAnim(tool)
		if animStringValueObject then
			toolAnim = animStringValueObject.Value
			animStringValueObject.Parent = nil -- This will delete the StringValue after reading! Be careful if it's meant to persist.
			toolAnimTime = time + 0.3
		end
		if time > toolAnimTime then
			toolAnimTime = 0
			toolAnim = "None"
		end
		animateTool()
	else
		stopToolAnimations()
		toolAnim = "None"
		toolAnimInstance = nil
		toolAnimTime = 0
	end
end

-- Function to set up character and connect events on spawn
local function setupCharacter(character)
	-- Disconnect previous connections if they exist (for respawns)
	for _, conn in pairs(connections) do
		conn:Disconnect()
	end
	connections = {} -- Clear the table

	Figure = character
	-- Wait for all parts to load for the new character
	Torso = Figure:WaitForChild("Torso")
	RightShoulder = Torso:WaitForChild("Right Shoulder")
	LeftShoulder = Torso:WaitForChild("Left Shoulder")
	RightHip = Torso:WaitForChild("Right Hip")
	LeftHip = Torso:WaitForChild("Left Hip")
	Neck = Torso:WaitForChild("Neck")
	Humanoid = Figure:WaitForChild("Humanoid")
	Animator = Humanoid:WaitForChild("Animator") -- Wait for the Animator

	-- Connect Humanoid events for the new character
	table.insert(connections, Humanoid.Died:Connect(onDied))
	table.insert(connections, Humanoid.Running:Connect(onRunning))
	table.insert(connections, Humanoid.Jumping:Connect(onJumping))
	table.insert(connections, Humanoid.Climbing:Connect(onClimbing))
	table.insert(connections, Humanoid.GettingUp:Connect(onGettingUp))
	table.insert(connections, Humanoid.FreeFalling:Connect(onFreeFall))
	table.insert(connections, Humanoid.FallingDown:Connect(onFallingDown))
	table.insert(connections, Humanoid.Seated:Connect(onSeated))
	table.insert(connections, Humanoid.PlatformStanding:Connect(onPlatformStanding))
	table.insert(connections, Humanoid.Swimming:Connect(onSwimming))

	-- Start initial animation
	playAnimation("idle", 0.1, Humanoid)
	pose = "Standing"
end

-- Initial setup if character already exists when script runs
if Player.Character then
	setupCharacter(Player.Character)
end

-- Connect to CharacterAdded for future respawns
Player.CharacterAdded:Connect(setupCharacter)

-- Heartbeat loop runs continuously to update animations
RunService.Heartbeat:Connect(function(time)
	-- Only run move if a character and humanoid are available
	if Figure and Humanoid and Humanoid.Health > 0 then
		move(time)
	end
end)
